import java.text.SimpleDateFormat

def purgeBranchesOlderThan(days) {

    // checkout master
    "git checkout master".execute()

    // get all branches
    def branches = "git branch -r".execute().text.split("\n")

    println("\nStale Branches (older than $days days)\n")

    // run through all branches
    for (branch in branches) {

        // remove white spaces at the edges
        branch = branch.trim()

        // ignore master
        if (branch.contains("master")) continue

        // figure out if there are any commits ahead master since x days
        def logs = "git log master..$branch --pretty=oneline --since=${days}.days.ago --stat".execute().text

        // tag and remove branches where there were no commits since x days
        if (logs.isEmpty()) {

            printStatsFor(branch)
            tag(branch)
            close(branch)
        }
    }
}

def tag(branch) {
    branch = branch.replace("origin/", "")

    // tag
    "git tag stale/$branch".execute().text

    if (!updateRemote()) return

    // push to origin
    "git push origin stale/$branch".execute()
}

def close(branch) {
    branch = branch.replace("origin/", "")

    if (!updateRemote()) return

    "git push origin --delete $branch".execute()
}

def days() {
    if (project.hasProperty("days")) {
        return project.getProperty("days")
    } else if (project.hasProperty("days")) {
        return System.getProperty("days")
    } else {
        // everything higher than ~ 1643384300 will cause overflow
        return 1600000000
    }
}

def updateRemote() {
    if (project.hasProperty("updateRemote")) {
        return project.getProperty("updateRemote") == "true"
    } else if (project.hasProperty("updateRemote")) {
        return System.getProperty("updateRemote") == "true"
    } else {
        return false
    }
}

def printStatsFor(branch) {

    // 2022-01-30 14:45:33 +0100
    def dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z")

    def lastCommit = "git log master..$branch -1 --format=%ai".execute().text.trim()

    if (lastCommit == "") return

    def commitDate = dateFormatter.parse(lastCommit)
    def duration = groovy.time.TimeCategory.minus(new Date(), commitDate)

    def behind = "git rev-list $branch..master".execute().text.split('\n').size()
    def ahead = "git rev-list master..$branch".execute().text.split('\n').size()

    println("Last commit before $duration | Ahead: $ahead | Behind: $behind | `$branch`")
}

task purge() {
    purgeBranchesOlderThan(days())
}